//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/IAM_Tank.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IAM_Tank: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IAM_Tank()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IAM_Tank"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""455bd099-9add-437a-862d-0733e64f91dc"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""1440cd25-8e2b-4ece-ae95-627e6e89d722"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnCannon"",
                    ""type"": ""Value"",
                    ""id"": ""abbb1d58-10ab-4a04-9a01-0a9e4f534f23"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnLook"",
                    ""type"": ""Value"",
                    ""id"": ""d9d534b7-16ab-4581-9c30-1d67df2c2423"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad Triggers"",
                    ""id"": ""396f5238-82c0-40bd-8e18-2b122f361288"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cb4eb543-a377-48fa-b4f5-21db0043c644"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""eb79584c-18b7-450f-b626-c05b3b90be6f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""VR Triggers"",
                    ""id"": ""ed4dbe7b-e76b-4bf3-8f33-8cc0acbc8a3f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f8ef8e21-2233-40bf-b869-f2c31cf5ee08"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""216c440f-a645-4e68-b537-7bc17902a22e"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""35fda16a-f152-4ddd-a018-23eaaf15c46a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17133c31-64c3-4e25-ae40-80acd5659724"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47dd1bab-ea9a-4735-84fc-e11ab3cbfee7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""groups"": """",
                    ""action"": ""TurnLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shooter"",
            ""id"": ""6273cc8f-8434-416a-9b40-37619194b57c"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""6da2ce73-1122-4958-9191-fd1c62a7fb38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""26d17f37-74f1-4979-9081-3d7163c85ea9"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c264469-ee36-4eb6-a92f-12f978ae1852"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Throttle = m_Movement.FindAction("Throttle", throwIfNotFound: true);
        m_Movement_TurnCannon = m_Movement.FindAction("TurnCannon", throwIfNotFound: true);
        m_Movement_TurnLook = m_Movement.FindAction("TurnLook", throwIfNotFound: true);
        // Shooter
        m_Shooter = asset.FindActionMap("Shooter", throwIfNotFound: true);
        m_Shooter_Fire = m_Shooter.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Throttle;
    private readonly InputAction m_Movement_TurnCannon;
    private readonly InputAction m_Movement_TurnLook;
    public struct MovementActions
    {
        private @IAM_Tank m_Wrapper;
        public MovementActions(@IAM_Tank wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_Movement_Throttle;
        public InputAction @TurnCannon => m_Wrapper.m_Movement_TurnCannon;
        public InputAction @TurnLook => m_Wrapper.m_Movement_TurnLook;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Throttle.started += instance.OnThrottle;
            @Throttle.performed += instance.OnThrottle;
            @Throttle.canceled += instance.OnThrottle;
            @TurnCannon.started += instance.OnTurnCannon;
            @TurnCannon.performed += instance.OnTurnCannon;
            @TurnCannon.canceled += instance.OnTurnCannon;
            @TurnLook.started += instance.OnTurnLook;
            @TurnLook.performed += instance.OnTurnLook;
            @TurnLook.canceled += instance.OnTurnLook;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Throttle.started -= instance.OnThrottle;
            @Throttle.performed -= instance.OnThrottle;
            @Throttle.canceled -= instance.OnThrottle;
            @TurnCannon.started -= instance.OnTurnCannon;
            @TurnCannon.performed -= instance.OnTurnCannon;
            @TurnCannon.canceled -= instance.OnTurnCannon;
            @TurnLook.started -= instance.OnTurnLook;
            @TurnLook.performed -= instance.OnTurnLook;
            @TurnLook.canceled -= instance.OnTurnLook;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Shooter
    private readonly InputActionMap m_Shooter;
    private List<IShooterActions> m_ShooterActionsCallbackInterfaces = new List<IShooterActions>();
    private readonly InputAction m_Shooter_Fire;
    public struct ShooterActions
    {
        private @IAM_Tank m_Wrapper;
        public ShooterActions(@IAM_Tank wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Shooter_Fire;
        public InputActionMap Get() { return m_Wrapper.m_Shooter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShooterActions set) { return set.Get(); }
        public void AddCallbacks(IShooterActions instance)
        {
            if (instance == null || m_Wrapper.m_ShooterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShooterActionsCallbackInterfaces.Add(instance);
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IShooterActions instance)
        {
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IShooterActions instance)
        {
            if (m_Wrapper.m_ShooterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShooterActions instance)
        {
            foreach (var item in m_Wrapper.m_ShooterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShooterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShooterActions @Shooter => new ShooterActions(this);
    public interface IMovementActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnTurnCannon(InputAction.CallbackContext context);
        void OnTurnLook(InputAction.CallbackContext context);
    }
    public interface IShooterActions
    {
        void OnFire(InputAction.CallbackContext context);
    }
}
